/* ===============================================================
   COFFEE SHOP SALES ANALYSIS PROJECT (MySQL + Power BI)
   Author: Zeeshan Ahmad
   Description: Data cleaning, KPI calculations, and analytics queries
   =============================================================== */

/* ===============================
   1. DATA CLEANING & PREPARATION
   =============================== */

SET SQL_SAFE_UPDATES = 0;

-- View sample data
SELECT * FROM coffee_shop_sales LIMIT 10;

-- Convert string to proper DATE
UPDATE coffee_shop_sales
SET transaction_date = STR_TO_DATE(transaction_date, '%d-%m-%Y')
WHERE transaction_date IS NOT NULL;

ALTER TABLE coffee_shop_sales
MODIFY COLUMN transaction_date DATE;

-- Convert string to TIME
UPDATE coffee_shop_sales
SET transaction_time = STR_TO_DATE(transaction_time, '%H:%i:%s')
WHERE transaction_time IS NOT NULL;

ALTER TABLE coffee_shop_sales
MODIFY COLUMN transaction_time TIME;

-- Fix corrupted column name (if any)
ALTER TABLE coffee_shop_sales
CHANGE COLUMN ï»¿transaction_id transaction_id INT;

-- Ensure numeric columns are correct
ALTER TABLE coffee_shop_sales
MODIFY COLUMN unit_price DOUBLE,
MODIFY COLUMN transaction_qty INT;

DESCRIBE coffee_shop_sales;


/* ===============================
   2. KPI CALCULATIONS
   =============================== */

-- Total Sales for each month
SELECT 
  MONTH(transaction_date) AS month,
  ROUND(SUM(unit_price * transaction_qty), 2) AS total_sales
FROM coffee_shop_sales
GROUP BY MONTH(transaction_date)
ORDER BY MONTH(transaction_date);

-- Month-on-Month (MoM) Sales Difference and Growth %
WITH monthly_sales AS (
  SELECT 
    MONTH(transaction_date) AS month,
    ROUND(SUM(unit_price * transaction_qty), 2) AS total_sales
  FROM coffee_shop_sales
  GROUP BY MONTH(transaction_date)
)
SELECT 
  month,
  total_sales,
  total_sales - LAG(total_sales) OVER (ORDER BY month) AS mom_difference,
  ROUND(
    (total_sales - LAG(total_sales) OVER (ORDER BY month)) /
    NULLIF(LAG(total_sales) OVER (ORDER BY month), 0) * 100, 2
  ) AS mom_growth_pct
FROM monthly_sales
ORDER BY month;

-- Total number of orders for each month
SELECT 
  MONTH(transaction_date) AS month,
  COUNT(transaction_id) AS total_orders
FROM coffee_shop_sales
GROUP BY MONTH(transaction_date)
ORDER BY MONTH(transaction_date);

-- Month-on-Month (MoM) Order Difference and Growth %
WITH monthly_orders AS (
  SELECT MONTH(transaction_date) AS month, COUNT(*) AS total_orders
  FROM coffee_shop_sales
  GROUP BY MONTH(transaction_date)
)
SELECT 
  month,
  total_orders,
  total_orders - LAG(total_orders) OVER (ORDER BY month) AS mom_difference,
  ROUND(
    (total_orders - LAG(total_orders) OVER (ORDER BY month)) /
    NULLIF(LAG(total_orders) OVER (ORDER BY month), 0) * 100, 2
  ) AS mom_growth_pct
FROM monthly_orders
ORDER BY month;

-- Total Quantity Sold for each month
SELECT 
  MONTH(transaction_date) AS month,
  SUM(transaction_qty) AS total_quantity_sold
FROM coffee_shop_sales
GROUP BY MONTH(transaction_date)
ORDER BY MONTH(transaction_date);

-- Month-on-Month (MoM) Quantity Difference and Growth %
WITH monthly_qty AS (
  SELECT MONTH(transaction_date) AS month, SUM(transaction_qty) AS total_qty
  FROM coffee_shop_sales
  GROUP BY MONTH(transaction_date)
)
SELECT 
  month,
  total_qty,
  total_qty - LAG(total_qty) OVER (ORDER BY month) AS mom_difference,
  ROUND(
    (total_qty - LAG(total_qty) OVER (ORDER BY month)) /
    NULLIF(LAG(total_qty) OVER (ORDER BY month), 0) * 100, 2
  ) AS mom_growth_pct
FROM monthly_qty
ORDER BY month;


/* ===============================
   3. DAILY & CALENDAR ANALYSIS
   =============================== */

-- Daily Sales, Quantity, and Orders (All Days)
SELECT 
  transaction_date,
  ROUND(SUM(unit_price * transaction_qty), 2) AS total_sales,
  SUM(transaction_qty) AS total_quantity_sold,
  COUNT(transaction_id) AS total_orders
FROM coffee_shop_sales
GROUP BY transaction_date
ORDER BY transaction_date;

-- Average Daily Sales for May
SELECT 
  ROUND(AVG(daily_sales), 2) AS average_daily_sales
FROM (
  SELECT SUM(unit_price * transaction_qty) AS daily_sales
  FROM coffee_shop_sales
  WHERE MONTH(transaction_date) = 5
  GROUP BY transaction_date
) AS t;


/* ===============================
   4. SEGMENT ANALYSIS
   =============================== */

-- SALES BY WEEKDAY / WEEKEND (May)
SELECT 
  CASE WHEN DAYOFWEEK(transaction_date) IN (1,7) THEN 'Weekends' ELSE 'Weekdays' END AS day_type,
  ROUND(SUM(unit_price * transaction_qty), 2) AS total_sales,
  SUM(transaction_qty) AS total_quantity,
  COUNT(transaction_id) AS total_orders
FROM coffee_shop_sales
WHERE MONTH(transaction_date) = 5
GROUP BY day_type;

-- SALES BY STORE LOCATION (May)
SELECT 
  store_location,
  ROUND(SUM(unit_price * transaction_qty), 2) AS total_sales,
  SUM(transaction_qty) AS total_quantity,
  COUNT(transaction_id) AS total_orders
FROM coffee_shop_sales
WHERE MONTH(transaction_date) = 5
GROUP BY store_location
ORDER BY total_sales DESC;

-- SALES BY PRODUCT CATEGORY (May)
SELECT 
  product_category,
  ROUND(SUM(unit_price * transaction_qty), 1) AS total_sales,
  SUM(transaction_qty) AS total_quantity
FROM coffee_shop_sales
WHERE MONTH(transaction_date) = 5
GROUP BY product_category
ORDER BY total_sales DESC;

-- SALES BY DAY AND HOUR (May)
SELECT 
  DAYOFWEEK(transaction_date) AS day_no,
  HOUR(transaction_time) AS hour,
  ROUND(SUM(unit_price * transaction_qty), 2) AS total_sales,
  SUM(transaction_qty) AS total_quantity,
  COUNT(transaction_id) AS total_orders
FROM coffee_shop_sales
WHERE MONTH(transaction_date) = 5
GROUP BY day_no, hour
ORDER BY day_no, hour;

-- SALES BY WEEKDAY (Monday–Sunday) FOR MAY
SELECT 
  CASE 
    WHEN DAYOFWEEK(transaction_date) = 2 THEN 'Monday'
    WHEN DAYOFWEEK(transaction_date) = 3 THEN 'Tuesday'
    WHEN DAYOFWEEK(transaction_date) = 4 THEN 'Wednesday'
    WHEN DAYOFWEEK(transaction_date) = 5 THEN 'Thursday'
    WHEN DAYOFWEEK(transaction_date) = 6 THEN 'Friday'
    WHEN DAYOFWEEK(transaction_date) = 7 THEN 'Saturday'
    ELSE 'Sunday'
  END AS day_of_week,
  ROUND(SUM(unit_price * transaction_qty), 2) AS total_sales
FROM coffee_shop_sales
WHERE MONTH(transaction_date) = 5
GROUP BY day_of_week
ORDER BY FIELD(day_of_week, 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');
